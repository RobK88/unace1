#!/bin/sh
# This is free and unencumbered software released into the public domain.
# For more information, please refer to <http://unlicense.org/>
#

APP_CFLAGS='-Wall -g -O2 -DHAVE_CONFIG_H'
APP_CXXFLAGS="${APP_CFLAGS}"
#APP_CPPFLAGS='-Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers'
APP_LDFLAGS=''
APP_LXXFLAGS=''
APP_LIBS=''
#sysroot_plus_includes_libs=1

if ! cd $(dirname "$0") ; then
	exit 1
fi

apps_to_check=''
extra_env_vars=''
config_h_extra=''
extra_configure_opts=''

if [ -f configure.project ] ; then
	. ./configure.project
fi

#==========================================================

PACKAGE_NAME="${PACKAGE}"
PACKAGE_STRING="${PACKAGE} ${VERSION}"
PACKAGE_TARNAME="${PACKAGE}"
PACKAGE_BUGREPORT="${PACKAGE_URL}"
PACKAGE_VERSION="${VERSION}"

#==========================================================
# ./configure release

if [ "$1" = "release" ] ; then
	git clean -dfx
	dir=${PACKAGE}-${VERSION}
	rm -rf ../${dir}
	mkdir -p ../${dir}
	cp -rf $(pwd)/* ../${dir}
	cd ..
	if tar -vJcf ${dir}.tar.xz $dir ; then
		echo
		echo "*** ${dir}.tar.xz has been created"
	fi
	exit
fi

case $1 in
	po|pot|mo)  # ./configure po|pot|mo
		export GETTEXT_PACKAGE
		./po/zzpo.sh $1
		#sed -i '/#~ /d' po/*.po
		exit 0
		;;
	po2c)  # ./configure po2c
		[ -z "$PO2C_FILE" ] && PO2C_FILE="/dev/null"
		./po/po2c po/*.po > ${PO2C_FILE}
		exit $?
esac

#==========================================================

exit_error() {
	test "$1" && echo "$@"
	rm -f config.h config.mk
	exit 1
}


check_command() # 1:<cmd> finds $1 in $PATH
{
	if [ -z "$xxpath" ] ; then
		xxpath="$(echo "$PATH" | tr ':' ' ')"
	fi
	for zpathz in ${xxpath}
	do
		if [ -x "${zpathz}/${1}" ] ; then
			echo ${zpathz}/${1}
			return 0
		fi
	done
	return 1
}


check_exec() # $1=[exec] $2=[exit-if-error (exec_must_not_be_empty)]
{
	if [ -n "$1" ] ; then
		if test -x $1 || check_command $1 >/dev/null 2>&1 ; then
			return 0
		fi
		if [ -n "$2" ] ; then
			exit_error "error: can't find '$1'"
		fi
	fi
	return 1
}


check_compiler() #1:default 2:LIST
{
	zexec="$1"
	zlist="$2"
	if [ -n "$zexec" ] ; then
		zz_list="$zexec"
	else
		zz_list="$zlist"
	fi
	for compx in ${zz_list}
	do
		if test -x $compx || check_command $compx >/dev/null; then
			echo "$compx"
			return 0
		fi
	done
	return 1
}


set_cc()
{
	printf "Checking for C compiler..."
	ZCC=$(check_compiler "$CC" "cc gcc clang")
	if test -z "$ZCC" ; then
		exit_error "$CC not found"
	fi
	CC="$ZCC"
	echo " $CC"
}


set_cxx()
{
	printf "Checking for C++ compiler..."
	ZXX=$(check_compiler "$CXX" "c++ g++ clang++")
	if test -z "$ZXX" ; then
		exit_error "$CXX not found"
	fi
	CXX="$ZXX"
	echo " $CXX"
}


run_pkg_config()
{
	if [ -n "$static_link" ] ; then
		pkgconfig_s='--static'
	else
		pkgconfig_s=''
	fi
	if test -n "$PKG_CONFIG" ; then
		${PKG_CONFIG} ${pkgconfig_s} "$@"
	else
		pkg-config ${pkgconfig_s} "$@"
	fi
}


check_pkg() # $1=<pkg> $2=[min-version]
{
	# returns 0=ok, use pkg-config
	pc_pkg="$1"
	pc_pkg_min_ver="$2"
	if [ -n "$pc_pkg_min_ver" ] ; then
		printf "Checking for %s >= %s... " "$pc_pkg" "$pc_pkg_min_ver"
	else
		printf "Checking for %s... " "$pc_pkg"
	fi
	#--
	if [ -n "$pc_pkg_min_ver" ] ; then
		run_pkg_config ${pc_pkg} --atleast-version=${pc_pkg_min_ver} 2>/dev/null
	else
		run_pkg_config ${pc_pkg} 2>/dev/null
	fi
	xret=$?
	if [ $xret -eq 0 ] ; then
		echo "yes"
	else
		echo "no"
	fi
	return $xret
}

#==========================================================

#test "$CC"    || CC='gcc'
#test "$CXX"   || CXX='g++'
test "$STRIP"  || STRIP='strip'
test "$AR"     || AR='ar'
test "$AS"     || AS='as'
test "$NM"     || NM='nm'
test "$RANLIB" || RANLIB='ranlib'
test "$OBJCOPY" || OBJCOPY='objcopy'
test "$OBJDUMP" || OBJDUMP='objdump'
static_link=''

prefix=/usr/local
exec_prefix='${prefix}'
libdir='${exec_prefix}/lib'
bindir='${exec_prefix}/bin'
sbindir='${exec_prefix}/sbin'
libexecdir='${exec_prefix}/libexec'
includedir='${prefix}/include'
oldincludedir=/usr/include
datarootdir='${prefix}/share'
datadir='${datarootdir}'
localstatedir='${prefix}/var'
sysconfdir='${prefix}/etc'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
htmldir='${docdir}'
pdfdir='${docdir}'
psdir='${docdir}'
infodir='${datarootdir}/info'
mandir='${datarootdir}/man'
localedir='${datarootdir}/locale'
runstatedir='${localstatedir}/run'
top_builddir="$(pwd)"
top_srcdir="$(pwd)"
builddir=.
srcdir=.
mkdir_p='mkdir -p'
MKDIR_P='mkdir -p'

#==========================================================

help()
{
	echo "
Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [${prefix}]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [${exec_prefix}]

By default, 'make install' will install all the files in
'/usr/local/bin', '/usr/local/lib' etc.  You can specify
an installation prefix other than '/usr/local' using '--prefix',
for instance '--prefix=\$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [${bindir}]
  --sbindir=DIR           system admin executables [${sbindir}]
  --libexecdir=DIR        program executables [${libexecdir}]
  --sysconfdir=DIR        read-only single-machine data [${sysconfdir}]
  --localstatedir=DIR     modifiable single-machine data [${localstatedir}]
  --runstatedir=DIR       modifiable per-process data [${runstatedir}]
  --libdir=DIR            object code libraries [${libdir}]
  --includedir=DIR        C header files [${includedir}]
  --oldincludedir=DIR     C header files for non-gcc [${oldincludedir}]
  --datarootdir=DIR       read-only arch.-independent data root [${datarootdir}]
  --datadir=DIR           read-only architecture-independent data [${datadir}]
  --infodir=DIR           info documentation [${infodir}]
  --localedir=DIR         locale-dependent data [${localedir}]
  --mandir=DIR            man documentation [${mandir}]
  --docdir=DIR            documentation root [${docdir}]
  --htmldir=DIR           html documentation [${htmldir}]
  --dvidir=DIR            dvi documentation [${dvidir}]
  --pdfdir=DIR            pdf documentation [${pdfdir}]
  --psdir=DIR             ps documentation [${psdir}]

$(print_optional_features)

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-sysroot[=DIR]    Search for dependent libraries within DIR (or the
                          compiler's sysroot if not specified).

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  CXXFLAGS    C++ compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
$(print_extra_env_variables)

Use these variables to override the choices made by 'configure' or to help
it to find libraries and programs with nonstandard names/locations.
"
	exit
}

#==========================================================

print_optional_features()
{
	if [ -n "${extra_configure_opts}" ] ; then
		echo "Optional Features:"
	fi
	for confx in ${extra_configure_opts}
	do
		opt_print_${confx}
	done
}

print_extra_env_variables()
{
	for evar in ${extra_env_vars}
	do
		echo "  ${evar}_CFLAGS  compiler flags for ${evar}, overriding pkg-config"
		echo "  ${evar}_LIBS    linker flags for ${evar}, overriding pkg-config"
	done
}

#==========================================================

getvalue() {
	echo $1 | cut -f 2 -d '='
}

for i in $@
do
	case $i in
		--host=*) host="$(getvalue $i)" ;;
		CFLAGS=*)   CFLAGS="$CFLAGS $(getvalue $i)"     ;;
		CPPFLAGS=*) CPPFLAGS="$CPPFLAGS $(getvalue $i)" ;;
		LDFLAGS=*)  LDFLAGS="$LDFLAGS $(getvalue $i)"   ;;
		CXXFLAGS=*) CXXFLAGS="$CXXFLAGS $(getvalue $i)"   ;;
		LIBS=*)  LIBS="$LIBS $(getvalue $i)"   ;;
		CC=*)    CC="$(getvalue $i)"     ;;
		CXX=*)   CXX="$(getvalue $i)"    ;;
		STRIP=*) STRIP="$(getvalue $i)"  ;;
		AR=*)    AR="$(getvalue $i)"     ;;
		AS=*)    AS="$(getvalue $i)"     ;;
		NM=*)    NM="$(getvalue $i)"     ;;

		--prefix=*)     prefix="$(getvalue $i)"     ;;
		--exec_prefix=*) exec_prefix="$(getvalue $i)"     ;;
		--libdir=*)     libdir="$(getvalue $i)"     ;;
		--bindir=*)     bindir="$(getvalue $i)"     ;;
		--sbindir=*)    sbindir="$(getvalue $i)"    ;;
		--libexecdir=*) libexecdir="$(getvalue $i)" ;;
		--includedir=*) includedi="$(getvalue $i)"  ;;
		--oldincludedir=*)  oldincludedi="$(getvalue $i)" ;;
		--datarootdir=*)   datarootdir="$(getvalue $i)"   ;;
		--datadir=*)    datadir="$(getvalue $i)"          ;;
		--localstatedir=*) localstatedir="$(getvalue $i)" ;;
		--sysconfdir=*)    sysconfdir="$(getvalue $i)"    ;;
		--docdir=*)    docdir="$(getvalue $i)"   ;;
		--dvidir=*)    dvidir="$(getvalue $i)"   ;;
		--htmldir=*)   htmldir="$(getvalue $i)"  ;;
		--pdfdir=*)    pdfdir="$(getvalue $i)"   ;;
		--psdir=*)     psdir="$(getvalue $i)"    ;;
		--infodir=*)   infodir="$(getvalue $i)"  ;;
		--mandir=*)    mandir="$(getvalue $i)"   ;;
		--localedir=*)   localedir="$(getvalue $i)"   ;;
		--runstatedir=*) runstatedir="$(getvalue $i)" ;;
		--with-sysroot=*) sysroot="$(getvalue $i)" ;;
		--with-sysroot) sysroot='-print-sysroot' ;;
		--without-sysroot) sysroot='' ;;
		--enable-static-link)  static_link=1 ;;
		--disable-static-link) static_link=  ;;

		-h|--help) help ;;
	esac
done

for confx in ${extra_configure_opts}
do
	opt_configure_${confx} "$@"
done

# ====================================================

echo
set_cc
set_cxx

if test -n "$host" ; then
	printf "Checking cross-compiler... "
	if test -x ${host}-${CC} || check_command ${host}-${CC} >/dev/null; then
		CC=${host}-${CC}
		CXX=${host}-${CXX}
		LD=${host}-${LD}
		STRIP=${host}-${STRIP}
		AR=${host}-${AR}
		AS=${host}-${AS}
		NM=${host}-${NM}
		RANLIB=${host}-${RANLIB}
		OBJCOPY=${host}-${OBJCOPY}
		OBJDUMP=${host}-${OBJDUMP}
		echo "$host"
	else
		exit_error "not found"
	fi
fi

if [ -n "$static_link" ] ; then
	CC="$CC -static"
	CXX="$CXX -static"
fi

if [ -n "${sysroot}" ] ; then
	if [ "${sysroot}" = "-print-sysroot" ] ; then
		sysroot=$($CC -print-sysroot)
		if [ -z "$sysroot" ] ; then
			exit_error "--with-sysroot ERROR: compiler doesn't support -print-sysroot"
		fi
	fi
	if ! [ -d "$sysroot" ] ; then
		exit_error "--with-sysroot ERROR: $sysroot is not a directory"
	fi
	CC="$CC --sysroot=${sysroot}"
	CXX="$CXX --sysroot=${sysroot}"
	#--
	if [ -n "$sysroot_plus_includes_libs" ] ; then
		if [ -d ${sysroot}/include ] ; then
			CFLAGS="-I${sysroot}/include $CFLAGS"
			CXXFLAGS="-I${sysroot}/include $CXXFLAGS"
		fi
		if [ -d ${sysroot}/lib ] ; then
			LDFLAGS="-L${sysroot}/lib $LDFLAGS"
			LXXFLAGS="-L${sysroot}/lib $LDFLAGS"
		fi
	fi
fi

# apps to check, see configure.project (XXX_CFLAGS, XXX_LIBS)
for appx in ${apps_to_check}
do
	check_${appx}
done

#==========================================================
#             config.mk and Makefiles
#==========================================================

CFLAGS="$CFLAGS $APP_CFLAGS"
CPPFLAGS="$CPPFLAGS $APP_CPPFLAGS"
CXXFLAGS="$CXXFLAGS $APP_CXXFLAGS"
LDFLAGS="$LDFLAGS $APP_LDFLAGS"
LIBS="$LIBS $APP_LIBS"

makefiles=$(find . -name Makefile.in | sed -e 's%.in%%')

for makefile in config.mk ${makefiles}
do
	cat > ${makefile} <<EOF
# generated by ./configure
CC = ${CC}
CXX = ${CXX}
STRIP = ${STRIP}
AR = ${AR}
AS = ${AS}
NM = ${NM}
RANLIB = ${RANLIB}
OBJCOPY = ${OBJCOPY}
OBJDUMP = ${OBJDUMP}

CFLAGS = ${CFLAGS}
CPPFLAGS = ${CPPFLAGS}
CXXFLAGS = ${CXXFLAGS}
LDFLAGS = ${LDFLAGS}
LIBS = ${LIBS}

#=================================================

prefix = ${prefix}
exec_prefix = ${exec_prefix}
libdir = ${libdir}
bindir = ${bindir}
sbindir = ${sbindir}
libexecdir = ${libexecdir}
includedir = ${includedir}
oldincludedir = ${oldincludedir}
datarootdir = ${datarootdir}
datadir = ${datadir}
localstatedir = ${localstatedir}
sysconfdir = ${sysconfdir}
docdir = ${docdir}
dvidir = ${dvidir}
htmldir = ${htmldir}
pdfdir = ${pdfdir}
psdir = ${psdir}
infodir = ${infodir}
mandir = ${mandir}
localedir = ${localedir}
runstatedir = ${runstatedir}
top_builddir = ${top_builddir}
top_srcdir = ${top_srcdir}
builddir = ${builddir}
srcdir = ${srcdir}
mkdir_p = ${mkdir_p}
MKDIR_P = ${MKDIR_P}

INSTALL = install -c
INSTALL_DATA = install -c -m 644

#=================================================
${make_extra_flags}

EOF
	if [ -f ${makefile}.in ] ; then
		cat ${makefile}.in >> ${makefile}
	fi
done

#==========================================================
#                       config.h
#==========================================================

cat > config.h <<EOF
/* generated by ./configure */
#define PACKAGE "${PACKAGE}"
#define VERSION "${VERSION}"
#define PACKAGE_URL "${PACKAGE_URL}"
#define PACKAGE_NAME "${PACKAGE_NAME}"
#define PACKAGE_STRING "${PACKAGE_STRING}"
#define PACKAGE_TARNAME "${PACKAGE_TARNAME}"
#define PACKAGE_BUGREPORT "${PACKAGE_BUGREPORT}"
#define PACKAGE_VERSION "${PACKAGE_VERSION}"
${config_h_extra}
EOF

echo
echo "* Now run 'make'  (or 'make clean' first if the app is already compiled)"
echo
